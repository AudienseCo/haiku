/*

Functions
---------

Calculations used by other SCSS files. If you need to DRY-up some CSS properties
put that code in `core/_mixins.scss`, this is only for functions.

*/

@function number-to-width-unit($num) {
  $count: 1;

  @each $word in five, ten, fifteen, twenty,
  twentyfive, thirty, thirtyfive, forty, fortyfive,
  fifty, fiftyfive, sixty, sixtyfive, seventy, seventyfive,
  eighty, eightyfive, ninety, ninetyfive, hundred {
    @if ($count == $num) { @return $word; }
    $count: $count + 1;
  }

  @return "invalid";
}

@function width-unit-to-percent($num) {
  @return ($num * 5%);
}

@function pixel-to-rem($num) {
    @return ($num / 10);
}

// Makes a color darker or lighter in a number of points just as 0to255.com
@function neighbor-color($color, $index, $neighbors: 30) {
  $light-factor: 100%/$neighbors;
  $max-index:    ceil((100% - lightness($color))/$light-factor);
  $min-index:    ceil(lightness($color)/$light-factor);

  @if ($index > $max-index or $index < $min-index*-1) {
    @return "index out range";
  }

  @if ($index >= 0) {
    @return lighten($color, $index * $light-factor);
  } @else {
    @return darken($color, $index * $light-factor * -1);
  }
}

// Finds a color by name in the list of colors
@function find-color($name) {
  @each $color in $colors {
    @if nth($color, 1) == $name {
      @return $color;
    }
  }
  @return false;
}

// Finds a color special case by name, variant and hue
@function find-color-special-case($name, $variant, $hue) {
  @each $case in $special-cases {
    @if nth($case, 1) == $name and index($case, $variant) and index($case, $hue) {
      @return nth($case, 4);
    }
  }
  @return false;
}

// Finds a color in a color item by variant (primary, secondary or tertiary)
@function find-color-by-variant($color, $variant: primary) {
  @if $variant == "primary" and length($color) >= 2 {
    @return nth($color, 2);
  }
  @else if $variant == "secondary" and length($color) >= 3 {
    @return nth($color, 3);
  }
  @else if $variant == "tertiary" and length($color) >= 4 {
    @return nth($color, 4);
  }
  @return false;
}

// Apply a hue (regular, light or dark to a color)
@function apply-hue-to-color($color, $hue: regular) {
  $neighbor: 0;
  @if $hue == "dark" {
    $neighbor: -1;
  } @else if $hue == "light" {
    $neighbor: 1;
  }
  @return neighbor-color($color, $neighbor);
}

// Calculates a color from a name, variant and hue
@function color($name, $variant: primary, $hue: regular) {
  $special-case: find-color-special-case($name, $variant, $hue);
  @if $special-case {
    @return $special-case;
  }

  $color: find-color($name);
  @if $color {
    $color-variant: find-color-by-variant($color, $variant);
    @if $color-variant {
      @return apply-hue-to-color($color-variant, $hue);
    }
  }

  @return false;
}
